apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  labels:
    app: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: nanajanashia/k8s-demo-app:v1.0
        ports:
        - containerPort: 3000 # where the application starts inside the containers
        env:
        - name: USER_NAME # this is the variable name defined inside the application, so the application is hoping for that env variable to have a value
          valueFrom:
            secretRef:
              name: mongo-secret
              key: mongo-user
        - name: USER_PWD
          valueFrom:
            secretRef:
              name: mongo-secret
              key: mongo-password
        - name: DB_URL
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-url
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
spec:
  selector:
    app: webapp # this is how service and pod (above) find each other. Service foward the request to its related pods. This should match the label selector of the pod
  ports:
    - protocol: TCP
      port: 3000 # its a common practice to keep the same port, but it can be 8080 or any other.
      targetPort: 3000 # the port of the pod. The service should foward the request to